# NOTE, this assumes you will keep the last bank fixed to c000-ffff, and swap only the first bank 8000-bfff



MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0400, define = yes;
	#note, I located the c stack at 700-7ff, see below
	
	WRAM: start = $6000, size = $2000, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:

	CHR: start = $0000, size = $10000, file = %O, fill = yes;
	
    TEST: start = $8000, size = $8000, file = %O, fill = yes;

	DATA0: start = $8000, size = $2000, file = %O, fill = yes;
	DATA1: start = $8000, size = $2000, file = %O, fill = yes;
	DATA2: start = $8000, size = $2000, file = %O, fill = yes;
	DATA3: start = $8000, size = $2000, file = %O, fill = yes;
	DATA4: start = $8000, size = $2000, file = %O, fill = yes;
	DATA5: start = $8000, size = $2000, file = %O, fill = yes;
	DATA6: start = $8000, size = $2000, file = %O, fill = yes;
	DATA7: start = $8000, size = $2000, file = %O, fill = yes;
	DATA8: start = $8000, size = $2000, file = %O, fill = yes;
	DATA9: start = $8000, size = $2000, file = %O, fill = yes;
	DATA10: start = $8000, size = $2000, file = %O, fill = yes;
	DATA11: start = $8000, size = $2000, file = %O, fill = yes;
	DATA12: start = $8000, size = $2000, file = %O, fill = yes;
	DATA13: start = $8000, size = $2000, file = %O, fill = yes;
	DATA14: start = $8000, size = $2000, file = %O, fill = yes;
	DATA15: start = $8000, size = $2000, file = %O, fill = yes;
	DATA16: start = $8000, size = $2000, file = %O, fill = yes;
	DATA17: start = $8000, size = $2000, file = %O, fill = yes;
	DATA18: start = $8000, size = $2000, file = %O, fill = yes;
	DATA19: start = $8000, size = $2000, file = %O, fill = yes;
	DATA20: start = $8000, size = $2000, file = %O, fill = yes;
	DATA21: start = $8000, size = $2000, file = %O, fill = yes;
	DATA22: start = $8000, size = $2000, file = %O, fill = yes;
	DATA23: start = $8000, size = $2000, file = %O, fill = yes;
	DATA24: start = $8000, size = $2000, file = %O, fill = yes;
	DATA25: start = $8000, size = $2000, file = %O, fill = yes;
	DATA26: start = $8000, size = $2000, file = %O, fill = yes;
	DATA27: start = $8000, size = $2000, file = %O, fill = yes;

    PRG0: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG1: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG2: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG3: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG4: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG5: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG6: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG7: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG8: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG9: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG10: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG11: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG12: start = $8000, size = $2000, file = %O, fill = yes, define = yes;

    PRG: start = $a000, size = $4000, file = %O ,fill = yes, define = yes;
	PRG15: start = $e000, size = $2000, file = %O ,fill = yes, define = yes;
# make sure the reset code is in e000-ffff, see below	



# ! 16 Banks of 8K CHR ROM    
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    
# this needs to be in the fixed bank between e000 and ffff
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
	XRAM:	  load = WRAM,			 type = bss, define = yes;
	
	TEST_ROM: load = TEST,           type = ro, define = yes;

	MENU_GAME_DATA_1: load = DATA0,    type = ro, define = yes;
	MENU_GAME_DATA_2: load = DATA1,    type = ro, define = yes;
	MENU_GAME_DATA_3: load = DATA2,    type = ro, define = yes;
	MENU_GAME_DATA_4: load = DATA3,    type = ro, define = yes;

	MENU_GAME_NAMES_1: load = DATA4,   type = ro, define = yes;
	MENU_GAME_NAMES_2: load = DATA5,   type = ro, define = yes;
	MENU_GAME_NAMES_3: load = DATA6,   type = ro, define = yes;
	MENU_GAME_NAMES_4: load = DATA7,   type = ro, define = yes;

	BANK0:    load = PRG0,           type = ro, define = yes;
	BANK1:    load = PRG1,           type = ro, define = yes;
	BANK2:    load = PRG2,           type = ro, define = yes;
	BANK3:    load = PRG3,           type = ro, define = yes;
	BANK4:    load = PRG4,           type = ro, define = yes;
	BANK5:    load = PRG5,           type = ro, define = yes;
	BANK6:    load = PRG6,           type = ro, define = yes;
	BANK7:    load = PRG7,           type = ro, define = yes;
	BANK8:    load = PRG8,           type = ro, define = yes;
	BANK9:    load = PRG9,           type = ro, define = yes;
	BANK10:    load = PRG10,           type = ro, define = yes;
	BANK11:    load = PRG11,           type = ro, define = yes;
	BANK12:    load = PRG12,           type = ro, define = yes;

	MENU_MUS:  load = PRG,			start = $c000, type = ro, define = yes;

	STARTUP:  load = PRG15,          type = ro, define = yes;
	# needs to be in the e000-ffff fixed bank
	
	# SAMPLES:  load = PRG, start = $f000, type = ro;
	VECTORS:  load = PRG15, start = $fffa, type = ro;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 4; 			# mapper number, 4 = mmc3, txrom
	NES_PRG_BANKS:	 type = weak,  value = 32; 			# number of 16K PRG banks, = 128k
	NES_CHR_BANKS:	  type = weak, value = 0; 			# number of 8K CHR banks, = 128k
	NES_MIRRORING:	  type = weak, value = 0; 			# 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
	#SKIP_INES: type = weak, value = 1;

}

