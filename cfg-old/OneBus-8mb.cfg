# NOTE, this assumes you will keep the last bank fixed to c000-ffff, and swap only the first bank 8000-bfff



MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0300, define = yes;
	#note, I located the c stack at 700-7ff, see below
	
	WRAM: start = $6000, size = $2000, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;
	#HEADER: start = $0, size = $00, file = %O ,fill = yes;


#ROM Addresses:
	
	CHR: start = $8000, size = $20000, file = %O, fill = yes, fillval = $cc;    	

	#DATA0: start = $8000, size = $2000, file = %O, fill = yes, fillval = $11;
	#DATA1: start = $8000, size = $2000, file = %O, fill = yes, fillval = $12;
	#DATA2: start = $8000, size = $2000, file = %O, fill = yes, fillval = $13;
	#DATA3: start = $8000, size = $2000, file = %O, fill = yes, fillval = $14;
	DATA0: start = $8000, size = $2000, file = %O, fill = yes;
	DATA1: start = $8000, size = $2000, file = %O, fill = yes;
	DATA2: start = $8000, size = $2000, file = %O, fill = yes;
	DATA3: start = $8000, size = $2000, file = %O, fill = yes;
	#DATA4: start = $8000, size = $2000, file = %O, fill = yes, fillval = $15;	
	#DATA5: start = $8000, size = $2000, file = %O, fill = yes, fillval = $16;
	#DATA6: start = $8000, size = $2000, file = %O, fill = yes, fillval = $17;
	#DATA7: start = $8000, size = $2000, file = %O, fill = yes, fillval = $18;
	DATA4: start = $8000, size = $2000, file = %O, fill = yes;
	DATA5: start = $8000, size = $2000, file = %O, fill = yes;
	DATA6: start = $8000, size = $2000, file = %O, fill = yes;
	DATA7: start = $8000, size = $2000, file = %O, fill = yes;
	# 
	DATA8: start = $8000, size = $2000, file = %O, fill = yes, fillval = $19;
	DATA9: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1a;
	DATA10: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1b;
	DATA11: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1c;
	DATA12: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1d;
	DATA13: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1e;
	DATA14: start = $8000, size = $2000, file = %O, fill = yes, fillval = $1f;
	#ROMTEST: start = $40000, size = $8000, file = %O, fill = yes, fillval = $20;
	DATA15: start = $8000, size = $2000, file = %O, fill = yes, fillval = $20;
	ROMTEST: start = $40000, size = $8000, file = %O, fill = yes, fillval = $20;
	#DATA16: start = $8000, size = $2000, file = %O, fill = yes, fillval = $21;
	#DATA17: start = $8000, size = $2000, file = %O, fill = yes, fillval = $22;
	#DATA18: start = $8000, size = $2000, file = %O, fill = yes, fillval = $23;
	#DATA19: start = $8000, size = $2000, file = %O, fill = yes, fillval = $24;
	DATA20: start = $8000, size = $2000, file = %O, fill = yes, fillval = $25;
	DATA21: start = $8000, size = $2000, file = %O, fill = yes, fillval = $26;
	DATA22: start = $8000, size = $2000, file = %O, fill = yes, fillval = $27;
	DATA23: start = $8000, size = $2000, file = %O, fill = yes, fillval = $28;
	DATA24: start = $8000, size = $2000, file = %O, fill = yes, fillval = $29;
	DATA25: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2a;
	DATA26: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2b;
	DATA27: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2c;
	DATA28: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2d;
	DATA29: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2e;
	DATA30: start = $8000, size = $2000, file = %O, fill = yes, fillval = $2f;
	DATA31: start = $8000, size = $2000, file = %O, fill = yes, fillval = $30;

    PRG0: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $31;
	PRG1: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $32;
	PRG2: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $33;
	PRG3: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $34;
	PRG4: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $35;
	PRG5: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $36;
	PRG6: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $37;
	PRG7: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $38;
	PRG8: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $39;
	PRG9: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $3a;
	PRG10: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $3b;
	PRG11: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $3c;
	PRG12: start = $8000, size = $2000, file = %O, fill = yes, define = yes, fillval = $3d;

    PRG: start = $a000, size = $4000, file = %O ,fill = yes, define = yes, fillval = $3e;
	PRG15: start = $e000, size = $2000, file = %O ,fill = yes, define = yes , fillval = $3f;

	ROM1: start = $80000, size = $80000, file = %O, fill = yes;
	ROM2: start = $100000, size = $80000, file = %O, fill = yes;
	ROM3: start = $180000, size = $80000, file = %O, fill = yes;
	ROM4: start = $200000, size = $80000, file = %O, fill = yes;
	ROM5: start = $280000, size = $80000, file = %O, fill = yes;
	ROM6: start = $300000, size = $80000, file = %O, fill = yes;
	ROM7: start = $380000, size = $80000, file = %O, fill = yes;
	ROM8: start = $400000, size = $80000, file = %O, fill = yes;
	ROM9: start = $480000, size = $80000, file = %O, fill = yes;
	ROM10: start = $500000, size = $80000, file = %O, fill = yes;
	ROM11: start = $580000, size = $80000, file = %O, fill = yes;
	ROM12: start = $600000, size = $80000, file = %O, fill = yes;
	ROM13: start = $680000, size = $80000, file = %O, fill = yes;
	ROM14: start = $700000, size = $80000, file = %O, fill = yes;
	ROM15: start = $780000, size = $80000, file = %O, fill = yes;
# make sure the reset code is in e000-ffff, see below	



# ! 16 Banks of 8K CHR ROM    
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    
# this needs to be in the fixed bank between e000 and ffff
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
	XRAM:	  load = WRAM,			 type = bss, define = yes;
	
	#TEST_ROM: load = TEST,           type = ro, define = yes;

	MENU_GAME_DATA_1: load = DATA0,    type = ro, define = yes;
	MENU_GAME_DATA_2: load = DATA1,    type = ro, define = yes;
	MENU_GAME_DATA_3: load = DATA2,    type = ro, define = yes;
	MENU_GAME_DATA_4: load = DATA3,    type = ro, define = yes;

	MENU_GAME_NAMES_1: load = DATA4,   type = ro, define = yes;
	MENU_GAME_NAMES_2: load = DATA5,   type = ro, define = yes;
	MENU_GAME_NAMES_3: load = DATA6,   type = ro, define = yes;
	MENU_GAME_NAMES_4: load = DATA7,   type = ro, define = yes;

	TEST_ROMS:         load = ROMTEST,   type = ro, define = yes;

	BANK0:    load = PRG0,           type = ro, define = yes;
	BANK1:    load = PRG1,           type = ro, define = yes;
	BANK2:    load = PRG2,           type = ro, define = yes;
	BANK3:    load = PRG3,           type = ro, define = yes;
	BANK4:    load = PRG4,           type = ro, define = yes;
	BANK5:    load = PRG5,           type = ro, define = yes;
	BANK6:    load = PRG6,           type = ro, define = yes;
	BANK7:    load = PRG7,           type = ro, define = yes;
	BANK8:    load = PRG8,           type = ro, define = yes;
	BANK9:    load = PRG9,           type = ro, define = yes;
	BANK10:    load = PRG10,           type = ro, define = yes;
	BANK11:    load = PRG11,           type = ro, define = yes;
	BANK12:    load = PRG12,           type = ro, define = yes;

	MENU_MUS:  load = PRG,			start = $c000, type = ro, define = yes;

	STARTUP:  load = PRG15,          type = ro, define = yes;
	# needs to be in the e000-ffff fixed bank
	
	# SAMPLES:  load = PRG, start = $f000, type = ro;
	VECTORS:  load = PRG15, start = $fffa, type = ro;

	ROM1:    load = ROM1,           type = ro, define = yes;
	ROM2:    load = ROM2,           type = ro, define = yes;
	ROM3:    load = ROM3,           type = ro, define = yes;
	ROM4:    load = ROM4,           type = ro, define = yes;
	ROM5:    load = ROM5,           type = ro, define = yes;
	ROM6:    load = ROM6,           type = ro, define = yes;
	ROM7:    load = ROM7,           type = ro, define = yes;
	ROM8:    load = ROM8,           type = ro, define = yes;
	ROM9:    load = ROM9,           type = ro, define = yes;
	ROM10:    load = ROM10,           type = ro, define = yes;
	ROM11:    load = ROM11,           type = ro, define = yes;
	ROM12:    load = ROM12,           type = ro, define = yes;
	ROM13:    load = ROM13,           type = ro, define = yes;
	ROM14:    load = ROM14,           type = ro, define = yes;
	ROM15:    load = ROM15,           type = ro, define = yes;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 256; 			# mapper number, 4 = mmc3, txrom
	NES_PRG_BANKS:	 type = weak,  value = 512; 			# number of 16K PRG banks, = 128k
	NES_CHR_BANKS:	  type = weak, value = 0; 			# number of 8K CHR banks, = 128k
	NES_MIRRORING:	  type = weak, value = 0; 			# 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
	SKIP_INES: type = weak, value = 1;
	#OVERDUMP: type = weak, value = 0;

}

