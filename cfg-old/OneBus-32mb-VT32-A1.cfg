# NOTE, this assumes you will keep the last bank fixed to c000-ffff, and swap only the first bank 8000-bfff



MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0300, define = yes;
	#note, I located the c stack at 700-7ff, see below
	
	WRAM: start = $6000, size = $2000, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;
	#HEADER: start = $0, size = $00, file = %O ,fill = yes;


#ROM Addresses:
	ROM0: start = $0, size = $40000, file = %O, fill = yes;   
	CHR_ROM: start = $0, size = $20000, file = %O, fill = yes;

	ROM_MUS: start = $8000, size = $8000, file = %O, fill = yes, define = yes;	
	PRG0: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG1: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG2: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG3: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG4: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	DATA0: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	DATA1: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	DATA2: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	DATA3: start = $8000, size = $2000, file = %O, fill = yes, define = yes;	

    PRG: start = $a000, size = $4000, file = %O ,fill = yes, define = yes;
	PRG15: start = $e000, size = $2000, file = %O ,fill = yes, define = yes;
	
	ROM1: start = $80000, size = $80000, file = %O, fill = yes;
	ROM2: start = $100000, size = $80000, file = %O, fill = yes;
	ROM3: start = $180000, size = $80000, file = %O, fill = yes;
	ROM4: start = $200000, size = $80000, file = %O, fill = yes;
	ROM5: start = $280000, size = $80000, file = %O, fill = yes;
	ROM6: start = $300000, size = $80000, file = %O, fill = yes;
	ROM7: start = $380000, size = $80000, file = %O, fill = yes;
	ROM8: start = $400000, size = $80000, file = %O, fill = yes;
	ROM9: start = $480000, size = $80000, file = %O, fill = yes;
	ROM10: start = $500000, size = $80000, file = %O, fill = yes;
	ROM11: start = $580000, size = $80000, file = %O, fill = yes;
	ROM12: start = $600000, size = $80000, file = %O, fill = yes;
	ROM13: start = $680000, size = $80000, file = %O, fill = yes;
	ROM14: start = $700000, size = $80000, file = %O, fill = yes;
	ROM15: start = $780000, size = $80000, file = %O, fill = yes;
	ROM16: start = $800000, size = $80000, file = %O, fill = yes;
	ROM17: start = $880000, size = $80000, file = %O, fill = yes;
	ROM18: start = $900000, size = $80000, file = %O, fill = yes;
	ROM19: start = $980000, size = $80000, file = %O, fill = yes;
	ROM20: start = $a00000, size = $80000, file = %O, fill = yes;
	ROM21: start = $a80000, size = $80000, file = %O, fill = yes;
	ROM22: start = $b00000, size = $80000, file = %O, fill = yes;
	ROM23: start = $b80000, size = $80000, file = %O, fill = yes;
	ROM24: start = $c00000, size = $80000, file = %O, fill = yes;
	ROM25: start = $c80000, size = $80000, file = %O, fill = yes;
	ROM26: start = $d00000, size = $80000, file = %O, fill = yes;
	ROM27: start = $d80000, size = $80000, file = %O, fill = yes;
	ROM28: start = $e00000, size = $80000, file = %O, fill = yes;
	ROM29: start = $e80000, size = $80000, file = %O, fill = yes;
	ROM30: start = $f00000, size = $80000, file = %O, fill = yes;
	ROM31: start = $f80000, size = $80000, file = %O, fill = yes;
	ROM32: start = $1000000, size = $80000, file = %O, fill = yes;
	ROM33: start = $1080000, size = $80000, file = %O, fill = yes;
	ROM34: start = $1100000, size = $80000, file = %O, fill = yes;
	ROM35: start = $1180000, size = $80000, file = %O, fill = yes;
	ROM36: start = $1200000, size = $80000, file = %O, fill = yes;
	ROM37: start = $1280000, size = $80000, file = %O, fill = yes;
	ROM38: start = $1300000, size = $80000, file = %O, fill = yes;
	ROM39: start = $1380000, size = $80000, file = %O, fill = yes;
	ROM40: start = $1400000, size = $80000, file = %O, fill = yes;
	ROM41: start = $1480000, size = $80000, file = %O, fill = yes;
	ROM42: start = $1500000, size = $80000, file = %O, fill = yes;
	ROM43: start = $1580000, size = $80000, file = %O, fill = yes;
	ROM44: start = $1600000, size = $80000, file = %O, fill = yes;
	ROM45: start = $1680000, size = $80000, file = %O, fill = yes;
	ROM46: start = $1700000, size = $80000, file = %O, fill = yes;
	ROM47: start = $1780000, size = $80000, file = %O, fill = yes;
	ROM48: start = $1800000, size = $80000, file = %O, fill = yes;
	ROM49: start = $1880000, size = $80000, file = %O, fill = yes;
	ROM50: start = $1900000, size = $80000, file = %O, fill = yes;
	ROM51: start = $1980000, size = $80000, file = %O, fill = yes;
	ROM52: start = $1a00000, size = $80000, file = %O, fill = yes;
	ROM53: start = $1a80000, size = $80000, file = %O, fill = yes;
	ROM54: start = $1b00000, size = $80000, file = %O, fill = yes;
	ROM55: start = $1b80000, size = $80000, file = %O, fill = yes;
	ROM56: start = $1c00000, size = $80000, file = %O, fill = yes;
	ROM57: start = $1c80000, size = $80000, file = %O, fill = yes;
	ROM58: start = $1d00000, size = $80000, file = %O, fill = yes;
	ROM59: start = $1d80000, size = $80000, file = %O, fill = yes;
	MUSIC: start = $1e00000, size = $200000, file = %O, fill = yes, fillval = $ff;
# ! 16 Banks of 8K CHR ROM    
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    
# this needs to be in the fixed bank between e000 and ffff
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    CHARS:    load = CHR_ROM,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
	XRAM:	  load = WRAM,			 type = bss, define = yes;
	
	#TEST_ROM: load = TEST,           type = ro, define = yes;

	SOUND_OFFSET:     load = ROM_MUS,   type = ro, define = yes;
	MENU_GAME_DATA_1: load = DATA0,    type = ro, define = yes;				
	MENU_GAME_DATA_2: load = DATA1,    type = ro, define = yes;				

	MENU_GAME_NAMES_1: load = DATA2,   type = ro, define = yes;
	MENU_GAME_NAMES_2: load = DATA3,   type = ro, define = yes;
	

	BANK0:    load = PRG0,           type = ro, define = yes;	
	BANK1:    load = PRG1,           type = ro, define = yes;
	BANK2:    load = PRG2,           type = ro, define = yes;
	BANK3:    load = PRG3,           type = ro, define = yes;
	BANK4:    load = PRG4,           type = ro, define = yes;

	STARTUP:  load = PRG15,          type = ro, define = yes;
	# needs to be in the e000-ffff fixed bank
	
	# SAMPLES:  load = PRG, start = $f000, type = ro;
	VECTORS:  load = PRG15, start = $fffa, type = ro;

	ROM0:    load = ROM0,           type = ro, define = yes;
	ROM1:    load = ROM1,           type = ro, define = yes;
	ROM2:    load = ROM2,           type = ro, define = yes;
	ROM3:    load = ROM3,           type = ro, define = yes;
	ROM4:    load = ROM4,           type = ro, define = yes;
	ROM5:    load = ROM5,           type = ro, define = yes;
	ROM6:    load = ROM6,           type = ro, define = yes;
	ROM7:    load = ROM7,           type = ro, define = yes;
	ROM8:    load = ROM8,           type = ro, define = yes;
	ROM9:    load = ROM9,           type = ro, define = yes;
	ROM10:    load = ROM10,           type = ro, define = yes;
	ROM11:    load = ROM11,           type = ro, define = yes;
	ROM12:    load = ROM12,           type = ro, define = yes;
	ROM13:    load = ROM13,           type = ro, define = yes;
	ROM14:    load = ROM14,           type = ro, define = yes;
	ROM15:    load = ROM15,           type = ro, define = yes;
	ROM16:    load = ROM16,           type = ro, define = yes;
	ROM17:    load = ROM17,           type = ro, define = yes;
	ROM18:    load = ROM18,           type = ro, define = yes;
	ROM19:    load = ROM19,           type = ro, define = yes;
	ROM20:    load = ROM20,           type = ro, define = yes;
	ROM21:    load = ROM21,           type = ro, define = yes;
	ROM22:    load = ROM22,           type = ro, define = yes;
	ROM23:    load = ROM23,           type = ro, define = yes;
	ROM24:    load = ROM24,           type = ro, define = yes;
	ROM25:    load = ROM25,           type = ro, define = yes;
	ROM26:    load = ROM26,           type = ro, define = yes;
	ROM27:    load = ROM27,           type = ro, define = yes;
	ROM28:    load = ROM28,           type = ro, define = yes;
	ROM29:    load = ROM29,           type = ro, define = yes;
	ROM30:    load = ROM30,           type = ro, define = yes;
	ROM31:    load = ROM31,           type = ro, define = yes;
	ROM32:    load = ROM32,           type = ro, define = yes;
	ROM33:    load = ROM33,           type = ro, define = yes;
	ROM34:    load = ROM34,           type = ro, define = yes;
	ROM35:    load = ROM35,           type = ro, define = yes;
	ROM36:    load = ROM36,           type = ro, define = yes;
	ROM37:    load = ROM37,           type = ro, define = yes;
	ROM38:    load = ROM38,           type = ro, define = yes;
	ROM39:    load = ROM39,           type = ro, define = yes;
	ROM40:    load = ROM40,           type = ro, define = yes;
	ROM41:    load = ROM41,           type = ro, define = yes;
	ROM42:    load = ROM42,           type = ro, define = yes;
	ROM43:    load = ROM43,           type = ro, define = yes;
	ROM44:    load = ROM44,           type = ro, define = yes;
	ROM45:    load = ROM45,           type = ro, define = yes;
	ROM46:    load = ROM46,           type = ro, define = yes;
	ROM47:    load = ROM47,           type = ro, define = yes;
	ROM48:    load = ROM48,           type = ro, define = yes;
	ROM49:    load = ROM49,           type = ro, define = yes;
	ROM50:    load = ROM50,           type = ro, define = yes;
	ROM51:    load = ROM51,           type = ro, define = yes;
	ROM52:    load = ROM52,           type = ro, define = yes;
	ROM53:    load = ROM53,           type = ro, define = yes;
	ROM54:    load = ROM54,           type = ro, define = yes;
	ROM55:    load = ROM55,           type = ro, define = yes;
	ROM56:    load = ROM56,           type = ro, define = yes;
	ROM57:    load = ROM57,           type = ro, define = yes;
	ROM58:    load = ROM58,           type = ro, define = yes;
	ROM59:    load = ROM59,           type = ro, define = yes;
	MUSIC:    load = MUSIC,           type = ro, define = yes;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 270; 			# mapper number, 4 = mmc3, txrom
	NES_PRG_BANKS:	 type = weak,  value = 2048; 			# number of 16K PRG banks, = 128k
	NES_CHR_BANKS:	  type = weak, value = 0; 			# number of 8K CHR banks, = 128k
	NES_MIRRORING:	  type = weak, value = 0; 			# 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
	SKIP_INES: type = weak, value = 1;
	#OVERDUMP: type = weak, value = 0;

}

